[tool.poetry]
name = "dapla-toolbelt-metadata"
version = "0.3.0"
description = "Dapla Toolbelt Metadata"
authors = ["Team Metadata <metadata@ssb.no>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/statisticsnorway/dapla-toolbelt-metadata"
repository = "https://github.com/statisticsnorway/dapla-toolbelt-metadata"
documentation = "https://statisticsnorway.github.io/dapla-toolbelt-metadata"
classifiers = ["Development Status :: 4 - Beta"]

packages = [{ include = "dapla_metadata", from = "src" }]

[tool.poetry.urls]
Changelog = "https://github.com/statisticsnorway/dapla-toolbelt-metadata/releases"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
pyarrow = ">=8.0.0"
pydantic = ">=2.5.2"
pandas = ">=1.4.2"
dapla-toolbelt = ">=3.0.1"
arrow = ">=1.3.0"
python-dotenv = ">=1.0.1"
requests = ">=2.31.0"
beautifulsoup4 = ">=4.12.3"
cloudpathlib = { extras = ["gs"], version = ">=0.17.0" }
pyjwt = ">=2.8.0"
ssb-klass-python = ">=0.0.9"
ssb-datadoc-model = "^6.0.0"
typing-extensions = ">=4.12.2"

[tool.poetry.group.dev.dependencies]
black = ">=24.8.0"
pygments = ">=2.18.0"
coverage = { extras = ["toml"], version = ">=6.2" }
faker = ">=26.1.0"
furo = ">=2024.7.18"
pre-commit = ">=3.8.0"
ruff = ">=0.5.6"
pytest = ">=8.3.2"
sphinx = ">=6.2.1"
sphinx-autobuild = ">=2021.3.14"
sphinx-autodoc-typehints = ">=1.24.0"
sphinx-click = ">=3.0.2"
typeguard = ">=2.13.3"
xdoctest = { extras = ["colors"], version = ">=0.15.10" }
myst-parser = { version = ">=0.16.1" }
mypy = ">=0.950"
pytest-cov = ">=3.0.0"
nbstripout = ">=0.5.0"
python-kacl = "*"
pytest-mock = ">=3.14.0"
deptry = ">=0.12.0"
pandas-stubs = "*"
pyarrow-stubs = ">=10.0.1.9"
requests-mock = ">=1.12.1"
types-Pygments = "*"
types-colorama = "*"
types-setuptools = "*"
types-beautifulsoup4 = ">=4.12.0.20240511"
ipykernel = "^6.29.5"
rich = "^13.9.4"

[tool.pytest.ini_options]
pythonpath = ["src"]


[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["dapla_metadata"]
omit = ["tests/*", "__init__.py"]
relative_files = true

[tool.coverage.report]
show_missing = true
fail_under = 80

[tool.mypy]
plugins = ["pydantic.mypy"]
strict = false
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true

[[tool.mypy.overrides]]
# Allow missing type hints in third-party libraries without type information.
module = [
    "dapla",
    "gcsfs",
    "pyarrow",
    "pyarrow.parquet",
    "datadoc_model",
    "datadoc_model.model",
    "pytest_mock",
]
ignore_missing_imports = true

# Disable specific error codes in the 'tests' package
# Also don't require type annotations
[[tool.mypy.overrides]]
module = ["tests.*"]
disable_error_code = [
    "var-annotated",
    "has-type",
    "no-any-return",
    "no-untyped-def",
]

[tool.ruff]
force-exclude = true # Apply excludes to pre-commit
show-fixes = true
src = ["src", "tests"]
target-version = "py310" # Minimum Python version supported
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
extend-exclude = [
    "__pycache__",
    "old",
    ".ipynb_checkpoints",
    "noxfile.py",
    "docs/conf.py",
]

# Ruff rules may be customized as desired: https://docs.astral.sh/ruff/rules/
[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN101", # Supress missing-type-self.
    "ANN102", # Supress missing-type-cls.
    "ANN202", # Don't requiere return type annotation for private functions.
    "ANN401", # Allow type annotation with type Any.
    "D100",   # Supress undocumented-public-module. Only doc of public api required.
    "E402",   # Supress module-import-not-at-top-of-file, needed in jupyter notebooks.
    "E501",   # Supress line-too-long warnings: trust black's judgement on this one.
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "google" # You can also use "numpy".

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "validator",
    "root_validator",
    "pydantic.validator",
]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]
"**/tests/*" = [
    "ANN001", # type annotations don't add value for test functions
    "ANN002", # type annotations don't add value for test functions
    "ANN003", # type annotations don't add value for test functions
    "ANN201", # type annotations don't add value for test functions
    "ANN204", # type annotations don't add value for test functions
    "ANN205", # type annotations don't add value for test functions
    "ANN206", # type annotations don't add value for test functions
    "D100",   # docstrings are overkill for test functions
    "D101",
    "D102",
    "D103",
    "S101",   # asserts are encouraged in pytest
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
