"""Variable Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1
Contact: metadata@ssb.no
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from typing import Annotated
from typing import Any

from pydantic import Field
from pydantic import StrictFloat
from pydantic import StrictInt
from pydantic import StrictStr
from pydantic import validate_call

from ..api_client import ApiClient
from ..api_client import RequestSerialized
from ..api_response import ApiResponse
from ..models.complete_response import CompleteResponse
from ..rest import RESTResponseType


class DataMigrationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def create_variable_definition_from_var_dok(
        self,
        vardok_id: Annotated[
            StrictStr, Field(description="The ID of the definition in Vardok.")
        ],
        active_group: Annotated[
            StrictStr,
            Field(description="The group which the user currently represents."),
        ],
        _request_timeout: None
        | Annotated[StrictFloat, Field(gt=0)]
        | tuple[
            Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
        ] = None,
        _request_auth: dict[StrictStr, Any] | None = None,
        _content_type: StrictStr | None = None,
        _headers: dict[StrictStr, Any] | None = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CompleteResponse:
        """Create a variable definition from a VarDok variable definition.

        Create a variable definition from a VarDok variable definition.

        :param vardok_id: The ID of the definition in Vardok. (required)
        :type vardok_id: str
        :param active_group: The group which the user currently represents. (required)
        :type active_group: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """
        _param = self._create_variable_definition_from_var_dok_serialize(
            vardok_id=vardok_id,
            active_group=active_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, str | None] = {
            "201": "CompleteResponse",
            "400": None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout,
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def create_variable_definition_from_var_dok_with_http_info(
        self,
        vardok_id: Annotated[
            StrictStr, Field(description="The ID of the definition in Vardok.")
        ],
        active_group: Annotated[
            StrictStr,
            Field(description="The group which the user currently represents."),
        ],
        _request_timeout: None
        | Annotated[StrictFloat, Field(gt=0)]
        | tuple[
            Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
        ] = None,
        _request_auth: dict[StrictStr, Any] | None = None,
        _content_type: StrictStr | None = None,
        _headers: dict[StrictStr, Any] | None = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CompleteResponse]:
        """Create a variable definition from a VarDok variable definition.

        Create a variable definition from a VarDok variable definition.

        :param vardok_id: The ID of the definition in Vardok. (required)
        :type vardok_id: str
        :param active_group: The group which the user currently represents. (required)
        :type active_group: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """
        _param = self._create_variable_definition_from_var_dok_serialize(
            vardok_id=vardok_id,
            active_group=active_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, str | None] = {
            "201": "CompleteResponse",
            "400": None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout,
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def create_variable_definition_from_var_dok_without_preload_content(
        self,
        vardok_id: Annotated[
            StrictStr, Field(description="The ID of the definition in Vardok.")
        ],
        active_group: Annotated[
            StrictStr,
            Field(description="The group which the user currently represents."),
        ],
        _request_timeout: None
        | Annotated[StrictFloat, Field(gt=0)]
        | tuple[
            Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
        ] = None,
        _request_auth: dict[StrictStr, Any] | None = None,
        _content_type: StrictStr | None = None,
        _headers: dict[StrictStr, Any] | None = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a variable definition from a VarDok variable definition.

        Create a variable definition from a VarDok variable definition.

        :param vardok_id: The ID of the definition in Vardok. (required)
        :type vardok_id: str
        :param active_group: The group which the user currently represents. (required)
        :type active_group: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """
        _param = self._create_variable_definition_from_var_dok_serialize(
            vardok_id=vardok_id,
            active_group=active_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, str | None] = {
            "201": "CompleteResponse",
            "400": None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout,
        )
        return response_data.response

    def _create_variable_definition_from_var_dok_serialize(
        self,
        vardok_id,
        active_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: dict[str, str] = {}

        _path_params: dict[str, str] = {}
        _query_params: list[tuple[str, str]] = []
        _header_params: dict[str, str | None] = _headers or {}
        _form_params: list[tuple[str, str]] = []
        _files: dict[
            str,
            str | bytes | list[str] | list[bytes] | list[tuple[str, bytes]],
        ] = {}
        _body_params: bytes | None = None

        # process the path parameters
        if vardok_id is not None:
            _path_params["vardok-id"] = vardok_id
        # process the query parameters
        if active_group is not None:
            _query_params.append(("active_group", active_group))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                [
                    "application/json",
                ],
            )

        # authentication setting
        _auth_settings: list[str] = [
            "Keycloak token",
        ]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/vardok-migration/{vardok-id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
