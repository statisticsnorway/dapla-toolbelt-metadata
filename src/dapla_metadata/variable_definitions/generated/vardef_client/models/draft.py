# coding: utf-8

"""
Variable Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1
Contact: metadata@ssb.no
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ..models.contact import Contact
from ..models.language_string_type import LanguageStringType
from typing import Optional, Set
from typing_extensions import Self


class Draft(BaseModel):
    """
    Create a Draft Variable Definition
    """  # noqa: E501

    name: LanguageStringType = Field(
        description="Name of the variable. Must be unique for a given Unit Type and Owner combination."
    )
    short_name: Annotated[str, Field(strict=True)] = Field(
        description="Recommended short name. Must be unique within an organization."
    )
    definition: LanguageStringType = Field(description="Definition of the variable.")
    classification_reference: Optional[StrictStr] = Field(
        default=None,
        description="ID of a classification or code list from Klass. The given classification defines all possible values for the defined variable.",
    )
    unit_types: List[StrictStr] = Field(
        description="A list of one or more unit types, e.g. person, vehicle, household. Must be defined as codes from https://www.ssb.no/klass/klassifikasjoner/702."
    )
    subject_fields: List[StrictStr] = Field(
        description="A list of subject fields that the variable is used in. Must be defined as codes from https://www.ssb.no/klass/klassifikasjoner/618."
    )
    contains_sensitive_personal_information: StrictBool = Field(
        description="True if variable instances contain particularly sensitive information. Applies even if the information or identifiers are pseudonymized. Information within the following categories are regarded as particularly sensitive: Ethnicity, Political alignment, Religion, Philosophical beliefs, Union membership, Genetics, Biometrics, Health, Sexual relations, Sexual orientation"
    )
    measurement_type: Optional[StrictStr] = Field(
        default=None,
        description="Type of measurement for the variable, e.g. length, volume, currency. Must be defined as codes from https://www.ssb.no/klass/klassifikasjoner/303",
    )
    valid_from: date = Field(
        description="The variable definition is valid from this date inclusive"
    )
    external_reference_uri: Optional[StrictStr] = Field(
        default=None, description="A link (URI) to an external definition/documentation"
    )
    comment: Optional[LanguageStringType] = Field(
        default=None,
        description="Optional comment to explain the definition or communicate potential changes.",
    )
    related_variable_definition_uris: Optional[List[StrictStr]] = Field(
        default=None,
        description="Link(s) to related definitions of variables - a list of one or more definitions. For example for a variable after-tax income it could be relevant to link to definitions of income from work, property income etc.",
    )
    contact: Optional[Contact] = Field(default=None, description="Contact details")
    __properties: ClassVar[List[str]] = [
        "name",
        "short_name",
        "definition",
        "classification_reference",
        "unit_types",
        "subject_fields",
        "contains_sensitive_personal_information",
        "measurement_type",
        "valid_from",
        "external_reference_uri",
        "comment",
        "related_variable_definition_uris",
        "contact",
    ]

    @field_validator("short_name")
    def short_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9_]{3,}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9_]{3,}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Draft from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict["name"] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of definition
        if self.definition:
            _dict["definition"] = self.definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of comment
        if self.comment:
            _dict["comment"] = self.comment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict["contact"] = self.contact.to_dict()
        # set to None if classification_reference (nullable) is None
        # and model_fields_set contains the field
        if (
            self.classification_reference is None
            and "classification_reference" in self.model_fields_set
        ):
            _dict["classification_reference"] = None

        # set to None if measurement_type (nullable) is None
        # and model_fields_set contains the field
        if (
            self.measurement_type is None
            and "measurement_type" in self.model_fields_set
        ):
            _dict["measurement_type"] = None

        # set to None if external_reference_uri (nullable) is None
        # and model_fields_set contains the field
        if (
            self.external_reference_uri is None
            and "external_reference_uri" in self.model_fields_set
        ):
            _dict["external_reference_uri"] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict["comment"] = None

        # set to None if related_variable_definition_uris (nullable) is None
        # and model_fields_set contains the field
        if (
            self.related_variable_definition_uris is None
            and "related_variable_definition_uris" in self.model_fields_set
        ):
            _dict["related_variable_definition_uris"] = None

        # set to None if contact (nullable) is None
        # and model_fields_set contains the field
        if self.contact is None and "contact" in self.model_fields_set:
            _dict["contact"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Draft from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": LanguageStringType.from_dict(obj["name"])
                if obj.get("name") is not None
                else None,
                "short_name": obj.get("short_name"),
                "definition": LanguageStringType.from_dict(obj["definition"])
                if obj.get("definition") is not None
                else None,
                "classification_reference": obj.get("classification_reference"),
                "unit_types": obj.get("unit_types"),
                "subject_fields": obj.get("subject_fields"),
                "contains_sensitive_personal_information": obj.get(
                    "contains_sensitive_personal_information"
                ),
                "measurement_type": obj.get("measurement_type"),
                "valid_from": obj.get("valid_from"),
                "external_reference_uri": obj.get("external_reference_uri"),
                "comment": LanguageStringType.from_dict(obj["comment"])
                if obj.get("comment") is not None
                else None,
                "related_variable_definition_uris": obj.get(
                    "related_variable_definition_uris"
                ),
                "contact": Contact.from_dict(obj["contact"])
                if obj.get("contact") is not None
                else None,
            }
        )
        return _obj
