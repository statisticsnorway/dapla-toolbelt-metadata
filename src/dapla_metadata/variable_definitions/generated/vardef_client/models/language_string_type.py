"""Variable Definitions

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1
Contact: metadata@ssb.no
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import ClassVar

from pydantic import BaseModel
from pydantic import ConfigDict
from pydantic import StrictStr
from typing_extensions import Self


class LanguageStringType(BaseModel):
    """LanguageStringType"""

    nb: StrictStr | None = None
    nn: StrictStr | None = None
    en: StrictStr | None = None
    __properties: ClassVar[list[str]] = ["nb", "nn", "en"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of LanguageStringType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if nb (nullable) is None
        # and model_fields_set contains the field
        if self.nb is None and "nb" in self.model_fields_set:
            _dict["nb"] = None

        # set to None if nn (nullable) is None
        # and model_fields_set contains the field
        if self.nn is None and "nn" in self.model_fields_set:
            _dict["nn"] = None

        # set to None if en (nullable) is None
        # and model_fields_set contains the field
        if self.en is None and "en" in self.model_fields_set:
            _dict["en"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of LanguageStringType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "nb": obj.get("nb"),
                "nn": obj.get("nn"),
                "en": obj.get("en"),
            }
        )
        return _obj
